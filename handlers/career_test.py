from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ConversationHandler, CommandHandler, MessageHandler, filters, ContextTypes

QUESTION, = range(1)

questions = [
    ("–ö–∞–∫—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π?",
     ["–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç–∏", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å", "–°–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫—É", "–ú–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
      "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"]),

    ("–ö–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –≤–∞–º —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å?",
     ["–£–º–Ω—ã–π –¥–æ–º", "CRM-—Å–∏—Å—Ç–µ–º–∞", "–ú–æ–±–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "–í–∏–¥–µ–æ-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–í–µ–±-—Å–µ—Ä–≤–∏—Å"]),

    ("–ö–∞–∫–∏–µ —à–∫–æ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤–∞–º –±–ª–∏–∂–µ?",
     ["–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∞", "–ò–∑–æ –∏ —á–µ—Ä—á–µ–Ω–∏–µ", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –∏ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
      "–ê–ª–≥–µ–±—Ä–∞ –∏ –ª–æ–≥–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]),

    ("–ì–¥–µ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å?",
     ["–ò–Ω–∂–µ–Ω–µ—Ä–æ–º –ø–æ —Å–µ—Ç—è–º", "–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º", "UX/UI-–¥–∏–∑–∞–π–Ω–µ—Ä–æ–º", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ –º–µ–¥–∏–∞", "IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º",
      "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"]),

    ("–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?",
     ["–ñ–µ–ª–µ–∑–æ –∏ —Ç–µ—Ö–Ω–∏–∫–∞", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "–í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "–ö–æ–Ω—Ç–µ–Ω—Ç –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è",
      "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–ê–ª–≥–æ—Ä–∏—Ç–º—ã"]),

    ("–ß—Ç–æ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ –≤ —É—á–µ–±–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ?",
     ["–ñ–µ–ª–µ–∑–æ –∏ —Å–µ—Ç–∏", "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "UI-–ø—Ä–æ—Ç–æ—Ç–∏–ø", "–†–µ–∫–ª–∞–º–Ω—ã–π —Ä–æ–ª–∏–∫", "–¢–∞–±–ª–∏—Ü—ã –∏ –æ—Ç—á—ë—Ç—ã", "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å"]),

    ("–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è –≤–∞–º –±–ª–∏–∂–µ?",
     ["–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –∏ —Ç–µ—Ö–Ω–∏–∫–∞", "–ë–∏–∑–Ω–µ—Å-–∫–µ–π—Å—ã", "–ì—Ä–∞—Ñ–∏–∫–∞ –∏ UI", "–ü—Ä–æ–µ–∫—Ç—ã –≤ –º–µ–¥–∏–∞", "–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ",
      "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"]),

    ("–ß—Ç–æ –≤–∞–º –ø–æ –¥—É—à–µ?",
     ["–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Å–µ—Ç–∏", "IT –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∞", "–í–∏–∑—É–∞–ª –∏ —Å—Ç–∏–ª—å", "–í–∏–¥–µ–æ –∏ –∑–≤—É–∫", "–ò–Ω—Ñ–æ—Å–∏—Å—Ç–µ–º—ã", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ü–û"]),

    ("–ö–∞–∫–∏–µ –≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã?",
     ["–¢–µ—Ö–Ω–∏–∫–∞ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–∏—è", "–ê–Ω–∞–ª–∏–∑ –≤ –±–∏–∑–Ω–µ—Å–µ", "–ö—Ä–µ–∞—Ç–∏–≤ –∏ –≤–∏–∑—É–∞–ª", "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–¢–æ—á–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
      "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"]),

    ("–ö–µ–º –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç?",
     ["–°–∏—Å–∞–¥–º–∏–Ω–æ–º", "–ê–Ω–∞–ª–∏—Ç–∏–∫–æ–º", "IT-–¥–∏–∑–∞–π–Ω–µ—Ä–æ–º", "–ú–µ–¥–∏–∞-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º", "IT-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"])
]

direction_codes = [
    "09.03.01 ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Å–∏—Å—Ç–µ–º—ã –∏ —Å–µ—Ç–∏)",
    "09.03.02 ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–≤ –±–∏–∑–Ω–µ—Å–µ)",
    "09.03.02 ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–≤ –¥–∏–∑–∞–π–Ω–µ)",
    "09.03.02 ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ (–≤ –º–µ–¥–∏–∞–∏–Ω–¥—É—Å—Ç—Ä–∏–∏)",
    "09.03.03 ‚Äî –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ)",
    "09.03.04 ‚Äî –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è (–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º)"
]


async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["q_index"] = 0
    context.user_data["scores"] = [0] * 6
    return await ask_question(update, context)


async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q_index = context.user_data["q_index"]
    if q_index >= len(questions):
        return await show_result(update, context)

    question, options = questions[q_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–µ
    keyboard = [options[i:i + 2] for i in range(0, len(options), 2)]
    keyboard.append(["‚¨ÖÔ∏è –ú–µ–Ω—é"])
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(f"–í–æ–ø—Ä–æ—Å {q_index + 1} –∏–∑ {len(questions)}:\n\n{question}",
                                    reply_markup=reply_markup)
    return QUESTION


async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text

    if answer == "‚¨ÖÔ∏è –ú–µ–Ω—é":
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return ConversationHandler.END

    q_index = context.user_data["q_index"]
    _, options = questions[q_index]

    try:
        selected = options.index(answer)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return QUESTION

    context.user_data["scores"][selected] += 1
    context.user_data["q_index"] += 1
    return await ask_question(update, context)


async def show_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    scores = context.user_data["scores"]
    best_index = scores.index(max(scores))
    direction = direction_codes[best_index]

    reply_markup = ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ú–µ–Ω—é"]], resize_keyboard=True)

    await update.message.reply_text(
        f"üéì –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞, –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n\nüëâ *{direction}*",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    return ConversationHandler.END


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
def main_menu():
    return ReplyKeyboardMarkup([
        ["üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è", "üìù –û–±—â–µ–∂–∏—Ç–∏—è"],
        ["üìÖ –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã", "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏"],
        ["üßë‚Äçüíª –£–∑–Ω–∞–π —Å–≤–æ—é –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"]
    ], resize_keyboard=True)


def get_career_test_handler():
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r"üßë‚Äçüíª –£–∑–Ω–∞–π —Å–≤–æ—é –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"), start_test)
        ],
        states={
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)]
        },
        fallbacks=[],
    )
