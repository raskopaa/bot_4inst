from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (
    CommandHandler, MessageHandler, filters, ConversationHandler, CallbackContext
)
import json
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

USERS_FILE = "users.json"
CHOOSING_ROLE = 1  # –≠—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        with open(USERS_FILE, "r") as f:
            data = json.load(f)
            if isinstance(data, dict):
                return data  # ‚úÖ –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            else:
                return {}  # ‚ùå –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
    except (FileNotFoundError, json.JSONDecodeError):
        return {}  # ‚úÖ –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open(USERS_FILE, "w") as f:
        json.dump(users, f)


# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(user_id, role):
    users = load_users()
    users[str(user_id)] = role
    save_users(users)


async def start(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ç–æ –æ–Ω: —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

    keyboard = [["–°—Ç—É–¥–µ–Ω—Ç", "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã: —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç?", reply_markup=reply_markup
    )

    return CHOOSING_ROLE  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –¥–∏–∞–ª–æ–≥–∞


async def choose_role(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é."""
    user_id = update.message.from_user.id
    role = update.message.text.lower().strip()

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª: {role}")

    if role not in ["—Å—Ç—É–¥–µ–Ω—Ç", "–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–°—Ç—É–¥–µ–Ω—Ç' –∏–ª–∏ '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç'.")
        return CHOOSING_ROLE  # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    add_user(user_id, role)

    if role == "—Å—Ç—É–¥–µ–Ω—Ç":
        keyboard = [
            ["üïî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤"],
            ["üî¨ –ù–∞—É–∫–∞", "üéì –î–∏–ø–ª–æ–º—ã –∏ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏"],
            ["üíµ –°—Ç–∏–ø–µ–Ω–¥–∏–∏ –∏ –≥—Ä–∞–Ω—Ç—ã", "üèÜ –ß–µ–º–ø–∏–æ–Ω–∞—Ç—ã –∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏"],
            ["‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]
        ]
        welcome_text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ '–°—Ç—É–¥–µ–Ω—Ç'. –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:"
    else:
        keyboard = [
            ["üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è","üìù –û–±—â–µ–∂–∏—Ç–∏—è"],
            ["üìÖ –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã", "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏"],
            ["üßë‚Äçüíª –£–∑–Ω–∞–π —Å–≤–æ—é –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"]
        ]
        welcome_text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç'. –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:"

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –º–µ–Ω—é {role}")

    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥


def get_start_handlers():
    return ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_role)]
        },
        fallbacks=[CommandHandler("start", start)],
        allow_reentry=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–Ω–æ–≤–æ –≤—Ö–æ–¥–∏—Ç—å –≤ –¥–∏–∞–ª–æ–≥
    )
